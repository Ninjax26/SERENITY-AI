
import React, { useState, useEffect } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Textarea } from "@/components/ui/textarea";
import { BookOpen, Sparkles, Heart, Lightbulb, Calendar, Tag } from 'lucide-react';
import { supabase } from '../supabaseClient';
import type { User } from '@supabase/supabase-js';
import Papa from 'papaparse';
import * as pdfjsLib from 'pdfjs-dist';
import jsPDF from 'jspdf';
import { Tabs, TabsList, TabsTrigger, TabsContent } from "@/components/ui/tabs";
import CommunityForum from "../pages/Community";
import { Input } from "@/components/ui/input";

interface JournalEntry {
  id: string;
  title: string;
  content: string;
  date: Date;
  sentiment: 'positive' | 'neutral' | 'negative';
  tags: string[];
  wordCount: number;
}

const JournalInterface = () => {
  const [currentEntry, setCurrentEntry] = useState('');
  const [currentTitle, setCurrentTitle] = useState('');
  const [journalEntries, setJournalEntries] = useState<JournalEntry[]>([
    {
      id: '1',
      title: 'A Beautiful Morning',
      content: 'Today started with such positive energy. I woke up early, did some meditation, and felt really centered. The coffee tasted better than usual, and I had a meaningful conversation with a friend. These small moments make such a difference.',
      date: new Date(Date.now() - 86400000),
      sentiment: 'positive',
      tags: ['gratitude', 'morning', 'friendship'],
      wordCount: 45
    },
    {
      id: '2',
      title: 'Reflecting on Challenges',
      content: 'Work was stressful today. I felt overwhelmed by the deadlines and had trouble focusing. But I realized that this is temporary, and I can handle it one step at a time. Tomorrow is a new opportunity.',
      date: new Date(Date.now() - 172800000),
      sentiment: 'neutral',
      tags: ['work', 'stress', 'resilience'],
      wordCount: 38
    }
  ]);
  const [user, setUser] = useState<User | null>(null);
  const [error, setError] = useState<string | null>(null);
  const [loginWarning, setLoginWarning] = useState<string | null>(null);

  const writingPrompts = [
    "What am I most grateful for today?",
    "How did I show kindness to myself or others?",
    "What challenged me today and how did I respond?",
    "What emotions am I experiencing right now?",
    "What would I tell my younger self?",
    "What brought me joy or peace today?"
  ];

  const [currentPrompt, setCurrentPrompt] = useState(writingPrompts[0]);

  useEffect(() => {
    supabase.auth.getUser().then(({ data }) => {
      setUser(data.user);
      if (!data.user) {
        setLoginWarning('You must be signed in to save your journal entries. Please sign in.');
      } else {
        setLoginWarning(null);
        supabase
          .from('journal_entries')
          .select('*')
          .eq('user_id', data.user.id)
          .order('created_at', { ascending: false })
          .then(({ data: rows, error }) => {
            if (error) {
              setError('Failed to load journal entries.');
            } else if (rows) {
              setJournalEntries(rows.map((row: any) => ({
                id: row.id,
                title: row.title,
                content: row.content,
                date: new Date(row.created_at),
                sentiment: row.sentiment,
                tags: row.tags || [],
                wordCount: row.word_count
              })));
            }
          });
      }
    });
  }, []);

  const handleSaveEntry = async () => {
    setError(null);
    if (!currentEntry.trim()) return;
    if (!user) {
      setLoginWarning('You must be signed in to save your journal entries. Please sign in.');
      return;
    }

    // Simulate sentiment analysis
    const sentiment = currentEntry.toLowerCase().includes('happy') || currentEntry.toLowerCase().includes('grateful') || currentEntry.toLowerCase().includes('joy')
      ? 'positive'
      : currentEntry.toLowerCase().includes('sad') || currentEntry.toLowerCase().includes('angry') || currentEntry.toLowerCase().includes('frustrated')
      ? 'negative'
      : 'neutral';

    const newEntry: JournalEntry = {
      id: Date.now().toString(),
      title: currentTitle || `Entry from ${new Date().toLocaleDateString()}`,
      content: currentEntry,
      date: new Date(),
      sentiment,
      tags: [], // In a real app, this would be generated by AI
      wordCount: currentEntry.split(' ').length
    };

    setJournalEntries([newEntry, ...journalEntries]);
    setCurrentEntry('');
    setCurrentTitle('');
    // Save to Supabase
    const { error: insertError } = await supabase.from('journal_entries').insert({
      user_id: user.id,
      title: newEntry.title,
      content: newEntry.content,
      sentiment: newEntry.sentiment,
      tags: newEntry.tags,
      word_count: newEntry.wordCount,
      created_at: newEntry.date.toISOString()
    });
    if (insertError) {
      setError('Failed to save entry. Please try again.');
    }
  };

  // Add file import handlers
  const handleFileImport = async (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (!file || !user) return;
    if (file.type === 'text/csv') {
      Papa.parse(file, {
        complete: async (results) => {
          const text = results.data.map((row: any) => row.join(', ')).join('\n');
          const newEntry = {
            id: Date.now().toString(),
            title: 'Imported CSV Entry',
            content: text,
            date: new Date(),
            sentiment: 'neutral' as 'neutral',
            tags: [],
            wordCount: text.split(' ').length
          };
          setJournalEntries(prev => [newEntry, ...prev]);
          await supabase.from('journal_entries').insert({
            user_id: user.id,
            title: newEntry.title,
            content: newEntry.content,
            sentiment: newEntry.sentiment,
            tags: newEntry.tags,
            word_count: newEntry.wordCount,
            created_at: newEntry.date.toISOString()
          });
        },
        error: () => alert('Failed to parse CSV file.')
      });
    } else if (file.type === 'application/pdf') {
      const reader = new FileReader();
      reader.onload = async (e) => {
        const typedarray = new Uint8Array(e.target?.result as ArrayBuffer);
        const pdf = await pdfjsLib.getDocument({ data: typedarray }).promise;
        let text = '';
        for (let i = 1; i <= pdf.numPages; i++) {
          const page = await pdf.getPage(i);
          const content = await page.getTextContent();
          text += content.items.map((item: any) => item.str).join(' ') + '\n';
        }
        const newEntry = {
          id: Date.now().toString(),
          title: 'Imported PDF Entry',
          content: text,
          date: new Date(),
          sentiment: 'neutral' as 'neutral',
          tags: [],
          wordCount: text.split(' ').length
        };
        setJournalEntries(prev => [newEntry, ...prev]);
        await supabase.from('journal_entries').insert({
          user_id: user.id,
          title: newEntry.title,
          content: newEntry.content,
          sentiment: newEntry.sentiment,
          tags: newEntry.tags,
          word_count: newEntry.wordCount,
          created_at: newEntry.date.toISOString()
        });
      };
      reader.readAsArrayBuffer(file);
    } else {
      alert('Unsupported file type. Please upload a PDF or CSV file.');
    }
  };

  // Export journal as CSV
  const exportJournalAsCSV = () => {
    const csvRows = [
      'Title,Content,Date,Sentiment,Tags,WordCount',
      ...journalEntries.map(e => `${e.title.replace(/"/g, '""')},"${e.content.replace(/"/g, '""')}",${e.date.toLocaleString()},${e.sentiment},"${e.tags.join(';')}",${e.wordCount}`)
    ];
    const csvContent = csvRows.join('\n');
    const blob = new Blob([csvContent], { type: 'text/csv' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = 'journal_entries.csv';
    a.click();
    URL.revokeObjectURL(url);
  };

  // Export journal as PDF
  const exportJournalAsPDF = () => {
    const doc = new jsPDF();
    doc.setFontSize(12);
    journalEntries.forEach((e, i) => {
      doc.text(`Title: ${e.title}`, 10, 10 + i * 30);
      doc.text(`Date: ${e.date.toLocaleString()}`, 10, 16 + i * 30);
      doc.text(`Sentiment: ${e.sentiment}`, 10, 22 + i * 30);
      doc.text(`Tags: ${e.tags.join(', ')}`, 10, 28 + i * 30);
      doc.text(e.content, 10, 34 + i * 30);
    });
    doc.save('journal_entries.pdf');
  };

  const getSentimentColor = (sentiment: string) => {
    switch (sentiment) {
      case 'positive': return 'bg-wellness-100 text-wellness-700 border-wellness-200';
      case 'negative': return 'bg-red-100 text-red-700 border-red-200';
      default: return 'bg-serenity-100 text-serenity-700 border-serenity-200';
    }
  };

  const getSentimentEmoji = (sentiment: string) => {
    switch (sentiment) {
      case 'positive': return 'üòä';
      case 'negative': return 'üòî';
      default: return 'üòê';
    }
  };

  return (
    <div className="min-h-screen bg-background text-foreground p-4">
      <div className="max-w-6xl mx-auto">
        <Tabs defaultValue="journal" className="w-full">
          <TabsList className="mb-6 w-full grid grid-cols-2">
            <TabsTrigger value="journal">Journal</TabsTrigger>
            <TabsTrigger value="forum">Forum</TabsTrigger>
          </TabsList>
          <TabsContent value="journal">
            {/* Error and Login Warning */}
            {loginWarning && (
              <div className="mb-4 p-3 bg-yellow-100 text-yellow-800 border border-yellow-300 rounded">
                {loginWarning}
              </div>
            )}
            {error && (
              <div className="mb-4 p-3 bg-red-100 text-red-800 border border-red-300 rounded">
                {error}
              </div>
            )}
            {/* Export Buttons */}
            <div className="flex justify-end gap-2 mb-2">
              <Button variant="outline" size="sm" onClick={exportJournalAsCSV}>Export as CSV</Button>
              <Button variant="outline" size="sm" onClick={exportJournalAsPDF}>Export as PDF</Button>
            </div>
            {/* Header */}
            <div className="text-center mb-8 animate-fade-in">
              <div className="flex items-center justify-center space-x-2 mb-4">
                <div className="w-12 h-12 bg-gradient-to-br from-calm-500 to-wellness-500 rounded-full flex items-center justify-center">
                  <BookOpen className="w-6 h-6 text-white" />
                </div>
                <h1 className="text-3xl font-bold bg-gradient-to-r from-calm-600 to-wellness-600 bg-clip-text text-transparent">
                  Smart Journal
                </h1>
              </div>
              <p className="text-gray-600">Express yourself with AI-powered writing prompts and insights</p>
            </div>
            <div className="grid lg:grid-cols-3 gap-8">
              {/* Writing Area */}
              <div className="lg:col-span-2">
                <Card className="wellness-card bg-card text-card-foreground animate-fade-in">
                  <CardHeader>
                    <CardTitle className="flex items-center space-x-2">
                      <Sparkles className="w-5 h-5 text-calm-500" />
                      <span>New Journal Entry</span>
                    </CardTitle>
                  </CardHeader>
                  <CardContent className="space-y-4">
                    {/* AI Prompt */}
                    <div className="bg-gradient-to-r from-calm-50 to-wellness-50 dark:from-gray-900 dark:to-gray-800 border border-calm-200 dark:border-gray-700 rounded-lg p-4">
                      <div className="flex items-center space-x-2 mb-2">
                        <Lightbulb className="w-4 h-4 text-calm-600" />
                        <span className="text-sm font-medium text-calm-700">Writing Prompt</span>
                      </div>
                      <p className="text-calm-800 italic mb-3">"{currentPrompt}"</p>
                      <Button
                        variant="outline"
                        size="sm"
                        onClick={() => setCurrentPrompt(writingPrompts[Math.floor(Math.random() * writingPrompts.length)])}
                        className="text-calm-600 border-calm-300 hover:bg-calm-50"
                      >
                        New Prompt
                      </Button>
                    </div>
                    {/* Title Input */}
                    <div>
                      <label className="text-sm font-medium text-gray-700 mb-2 block">Entry Title (Optional)</label>
                      <Input
                        type="text"
                        value={currentTitle}
                        onChange={(e) => setCurrentTitle(e.target.value)}
                        placeholder="Give your entry a title..."
                        className="w-full"
                      />
                    </div>
                    {/* Writing Area */}
                    <div>
                      <label className="text-sm font-medium text-gray-700 mb-2 block">Your Thoughts</label>
                      <Textarea
                        value={currentEntry}
                        onChange={(e) => setCurrentEntry(e.target.value)}
                        placeholder="Start writing your thoughts here..."
                        className="min-h-64 border-calm-200 focus:border-calm-400 focus:ring-calm-400 resize-none"
                      />
                      <div className="flex justify-between items-center mt-2">
                        <span className="text-sm text-gray-500">
                          {currentEntry.split(' ').filter(word => word.length > 0).length} words
                        </span>
                        <Button
                          onClick={handleSaveEntry}
                          disabled={!currentEntry.trim()}
                          className="bg-gradient-to-r from-calm-500 to-wellness-500 hover:from-calm-600 hover:to-wellness-600 text-white"
                        >
                          Save Entry
                        </Button>
                        <label className="ml-2 cursor-pointer bg-gray-100 border border-gray-200 px-3 py-2 rounded-md text-xs text-gray-700 hover:bg-gray-200">
                          Import PDF/CSV
                          <input type="file" accept=".csv,application/pdf" onChange={handleFileImport} style={{ display: 'none' }} />
                        </label>
                      </div>
                    </div>
                  </CardContent>
                </Card>
              </div>
              {/* Journal History */}
              <div className="lg:col-span-1">
                <Card className="wellness-card bg-card text-card-foreground animate-fade-in" style={{animationDelay: '0.2s'}}>
                  <CardHeader>
                    <CardTitle className="flex items-center space-x-2">
                      <Calendar className="w-5 h-5 text-wellness-500" />
                      <span>Recent Entries</span>
                    </CardTitle>
                  </CardHeader>
                  <CardContent>
                    <div className="space-y-4 max-h-96 overflow-y-auto">
                      {journalEntries.map((entry) => (
                        <div key={entry.id} className="border border-gray-200 rounded-lg p-4 hover:bg-gray-50 transition-colors cursor-pointer">
                          <div className="flex items-start justify-between mb-2">
                            <h3 className="font-medium text-gray-800 dark:text-black">{entry.title}</h3>
                            <Badge className={`text-xs ${getSentimentColor(entry.sentiment)}`}>
                              {getSentimentEmoji(entry.sentiment)}
                            </Badge>
                          </div>
                          <p className="text-sm text-gray-600 line-clamp-3 mb-2">
                            {entry.content}
                          </p>
                          <div className="flex items-center justify-between text-xs text-gray-500">
                            <span>{entry.date.toLocaleDateString()}</span>
                            <span>{entry.wordCount} words</span>
                          </div>
                          {entry.tags.length > 0 && (
                            <div className="flex flex-wrap gap-1 mt-2">
                              {entry.tags.map((tag) => (
                                <Badge key={tag} variant="secondary" className="text-xs">
                                  #{tag}
                                </Badge>
                              ))}
                            </div>
                          )}
                        </div>
                      ))}
                    </div>
                  </CardContent>
                </Card>
                {/* Writing Stats */}
                <Card className="wellness-card bg-card text-card-foreground mt-6 animate-fade-in" style={{animationDelay: '0.4s'}}>
                  <CardHeader>
                    <CardTitle className="flex items-center space-x-2">
                      <Tag className="w-5 h-5 text-serenity-500" />
                      <span>Writing Stats</span>
                    </CardTitle>
                  </CardHeader>
                  <CardContent>
                    <div className="grid grid-cols-2 gap-4">
                      <div className="text-center">
                        <div className="text-2xl font-bold text-wellness-600 mb-1">
                          {journalEntries.length}
                        </div>
                        <p className="text-xs text-gray-600">Total Entries</p>
                      </div>
                      <div className="text-center">
                        <div className="text-2xl font-bold text-calm-600 mb-1">
                          {journalEntries.reduce((sum, entry) => sum + entry.wordCount, 0)}
                        </div>
                        <p className="text-xs text-gray-600">Words Written</p>
                      </div>
                      <div className="text-center">
                        <div className="text-2xl font-bold text-serenity-600 mb-1">
                          {journalEntries.filter(e => e.sentiment === 'positive').length}
                        </div>
                        <p className="text-xs text-gray-600">Positive Days</p>
                      </div>
                      <div className="text-center">
                        <div className="text-2xl font-bold text-wellness-600 mb-1">
                          7
                        </div>
                        <p className="text-xs text-gray-600">Day Streak</p>
                      </div>
                    </div>
                  </CardContent>
                </Card>
              </div>
            </div>
          </TabsContent>
          <TabsContent value="forum">
            <CommunityForum />
          </TabsContent>
        </Tabs>
      </div>
    </div>
  );
};

export default JournalInterface;
